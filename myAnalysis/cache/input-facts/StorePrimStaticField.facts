<TestStorePrimStaticField: int x>	<ClassInit3: void main(java.lang.String[])>
<TestStoreNullStaticField: java.lang.Object x>	<ClassInit3: void main(java.lang.String[])>
<java.lang.String: java.lang.ThreadLocal btcCache>	<java.lang.String: void <clinit>()>
<java.lang.String: java.lang.ThreadLocal ctbCache>	<java.lang.String: void <clinit>()>
<TestLoadPrimStaticField: int x>	<TestLoadPrimStaticField: void <clinit>()>
<java.lang.ThreadLocal: int nextHashCode>	<java.lang.ThreadLocal: int nextHashCode()>
<java.lang.ThreadLocal: int nextHashCode>	<java.lang.ThreadLocal: void <clinit>()>
<java.util.Locale: java.lang.String[] isoLanguages>	<java.util.Locale: void <clinit>()>
<java.util.Locale: java.lang.String[] isoCountries>	<java.util.Locale: void <clinit>()>
<java.util.Locale: java.util.Hashtable ctry2LangMapping>	<java.util.Locale: void <clinit>()>
<java.lang.System: java.lang.SecurityManager security>	<java.lang.System: void <clinit>()>
<java.lang.Double: double MIN_VALUE>	<java.lang.Double: void <clinit>()>
<java.lang.Math: long negativeZeroFloatBits>	<java.lang.Math: void <clinit>()>
<java.lang.Math: long negativeZeroDoubleBits>	<java.lang.Math: void <clinit>()>
<java.lang.ClassLoader: boolean sclSet>	<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.lang.ClassLoader: java.lang.RuntimePermission getClassLoaderPerm>	<java.lang.ClassLoader: void <clinit>()>
<java.lang.ClassLoader: java.security.PermissionCollection defaultPermissions>	<java.lang.ClassLoader: void <clinit>()>
<java.io.ObjectStreamClass: java.lang.Class[] OIS_ARGS>	<java.io.ObjectStreamClass: void <clinit>()>
<java.io.ObjectStreamClass: java.lang.Class[] OOS_ARGS>	<java.io.ObjectStreamClass: void <clinit>()>
<java.lang.SecurityManager: boolean packageAccessValid>	<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>
<java.lang.SecurityManager: boolean packageDefinitionValid>	<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>
<java.lang.SecurityManager: boolean packageAccessValid>	<java.lang.SecurityManager: void <clinit>()>
<java.lang.SecurityManager: boolean packageDefinitionValid>	<java.lang.SecurityManager: void <clinit>()>
<java.io.BufferedInputStream: int defaultBufferSize>	<java.io.BufferedInputStream: void <clinit>()>
<java.lang.Terminator: sun.misc.SignalHandler handler>	<java.lang.Terminator: void <clinit>()>
<sun.net.InetAddressCachePolicy: int cachePolicy>	<sun.net.InetAddressCachePolicy: void setIfNotSet(int)>
<sun.net.InetAddressCachePolicy: boolean set>	<sun.net.InetAddressCachePolicy: void <clinit>()>
<sun.net.InetAddressCachePolicy: boolean set>	<sun.net.InetAddressCachePolicy: void <clinit>()>
<sun.net.InetAddressCachePolicy: boolean set>	<sun.net.InetAddressCachePolicy: void <clinit>()>
<sun.net.InetAddressCachePolicy: int cachePolicy>	<sun.net.InetAddressCachePolicy: void <clinit>()>
<java.lang.FloatingDecimal: int maxSmallTen>	<java.lang.FloatingDecimal: void <clinit>()>
<java.lang.FloatingDecimal: int singleMaxSmallTen>	<java.lang.FloatingDecimal: void <clinit>()>
<sun.io.Converters: java.lang.String converterPackageName>	<sun.io.Converters: void <clinit>()>
<sun.io.Converters: java.lang.String defaultEncoding>	<sun.io.Converters: void <clinit>()>
<java.lang.StrictMath: long negativeZeroFloatBits>	<java.lang.StrictMath: void <clinit>()>
<java.lang.StrictMath: long negativeZeroDoubleBits>	<java.lang.StrictMath: void <clinit>()>
<java.lang.Thread: int threadInitNumber>	<java.lang.Thread: int nextThreadNum()>
<java.net.SocketPermission: boolean trustProxy>	<java.net.SocketPermission: void <clinit>()>
<java.lang.reflect.Proxy: long nextUniqueNumber>	<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>
<java.lang.reflect.Proxy: long nextUniqueNumber>	<java.lang.reflect.Proxy: void <clinit>()>
<java.net.InetAddress: java.net.InetAddressImpl impl>	<java.net.InetAddress: void <clinit>()>
<java.io.File: int counter>	<java.io.File: java.io.File generateFile(java.lang.String,java.lang.String,java.io.File)>
<java.io.File: int counter>	<java.io.File: java.io.File generateFile(java.lang.String,java.lang.String,java.io.File)>
<java.io.File: char separatorChar>	<java.io.File: void <clinit>()>
<java.io.File: char pathSeparatorChar>	<java.io.File: void <clinit>()>
<java.io.File: int counter>	<java.io.File: void <clinit>()>
<java.security.AccessControlContext: boolean debugInit>	<java.security.AccessControlContext: sun.security.util.Debug getDebug()>
<java.security.AccessControlContext: boolean debugInit>	<java.security.AccessControlContext: void <clinit>()>
<java.security.AccessControlContext: sun.security.util.Debug debug>	<java.security.AccessControlContext: void <clinit>()>
<java.net.URLConnection: boolean fileNameMapLoaded>	<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>
<java.net.URLConnection: boolean defaultAllowUserInteraction>	<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>
<java.net.URLConnection: boolean defaultUseCaches>	<java.net.URLConnection: void setDefaultUseCaches(boolean)>
<java.net.URLConnection: boolean defaultAllowUserInteraction>	<java.net.URLConnection: void <clinit>()>
<java.net.URLConnection: boolean defaultUseCaches>	<java.net.URLConnection: void <clinit>()>
<java.net.URLConnection: boolean fileNameMapLoaded>	<java.net.URLConnection: void <clinit>()>
<java.io.BufferedWriter: int defaultCharBufferSize>	<java.io.BufferedWriter: void <clinit>()>
<java.io.BufferedReader: int defaultCharBufferSize>	<java.io.BufferedReader: void <clinit>()>
<java.io.BufferedReader: int defaultExpectedLineLength>	<java.io.BufferedReader: void <clinit>()>
<java.util.Date: int defaultCenturyStart>	<java.util.Date: void makeStaticCalendars()>
<java.util.Date: java.util.Calendar staticCal>	<java.util.Date: void <clinit>()>
<java.util.Date: java.util.Calendar utcCal>	<java.util.Date: void <clinit>()>
<java.util.Date: int defaultCenturyStart>	<java.util.Date: void <clinit>()>
<java.util.Date: java.lang.ref.SoftReference simpleFormatter>	<java.util.Date: void <clinit>()>
<java.util.Date: java.lang.ref.SoftReference gmtFormatter>	<java.util.Date: void <clinit>()>
<java.lang.Shutdown: boolean runFinalizersOnExit>	<java.lang.Shutdown: void setRunFinalizersOnExit(boolean)>
<java.lang.Shutdown: java.util.HashSet hooks>	<java.lang.Shutdown: boolean remove(java.lang.Thread)>
<java.lang.Shutdown: int state>	<java.lang.Shutdown: void sequence()>
<java.lang.Shutdown: boolean runFinalizersOnExit>	<java.lang.Shutdown: void exit(int)>
<java.lang.Shutdown: int state>	<java.lang.Shutdown: void exit(int)>
<java.lang.Shutdown: int state>	<java.lang.Shutdown: void shutdown()>
<java.lang.Shutdown: int state>	<java.lang.Shutdown: void <clinit>()>
<java.lang.Shutdown: boolean runFinalizersOnExit>	<java.lang.Shutdown: void <clinit>()>
<java.lang.Shutdown: java.util.HashSet hooks>	<java.lang.Shutdown: void <clinit>()>
<java.lang.ref.Reference: java.lang.ref.Reference pending>	<java.lang.ref.Reference: void <clinit>()>
<java.security.Security: boolean reloadProviders>	<java.security.Security: void loadProviders()>
<java.security.Security: boolean reloadProviders>	<java.security.Security: void reloadProviders()>
<java.security.Security: boolean reloadProviders>	<java.security.Security: void <clinit>()>
<sun.misc.ProxyGenerator: boolean saveGeneratedFiles>	<sun.misc.ProxyGenerator: void <clinit>()>
<sun.misc.VM: boolean suspended>	<sun.misc.VM: boolean suspendThreads()>
<sun.misc.VM: boolean suspended>	<sun.misc.VM: void unsuspendThreads()>
<sun.misc.VM: boolean suspended>	<sun.misc.VM: void <clinit>()>
<sun.net.www.MimeTable: sun.net.www.MimeTable defaultInstance>	<sun.net.www.MimeTable: void <clinit>()>
<java.util.TimeZone: java.util.TimeZone defaultZone>	<java.util.TimeZone: void <clinit>()>
<java.util.TimeZone: java.text.NumberFormat numberFormat>	<java.util.TimeZone: void <clinit>()>
<java.text.DigitList: double LOG10>	<java.text.DigitList: void <clinit>()>
<sun.misc.SoftCache$ValueCell: int dropped>	<sun.misc.SoftCache$ValueCell: void drop()>
<sun.misc.SoftCache$ValueCell: int dropped>	<sun.misc.SoftCache$ValueCell: int access$210()>
<sun.misc.SoftCache$ValueCell: int dropped>	<sun.misc.SoftCache$ValueCell: void <clinit>()>
<sun.security.provider.PolicyFile: java.security.IdentityScope scope>	<sun.security.provider.PolicyFile: void <clinit>()>
<java.net.HttpURLConnection: boolean followRedirects>	<java.net.HttpURLConnection: void setFollowRedirects(boolean)>
<java.net.HttpURLConnection: boolean followRedirects>	<java.net.HttpURLConnection: void <clinit>()>
<sun.security.x509.AlgorithmId: boolean initOidTable>	<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>
<sun.security.x509.AlgorithmId: boolean initOidTable>	<sun.security.x509.AlgorithmId: void <clinit>()>
<java.security.SecureRandom: java.security.SecureRandom seedGenerator>	<java.security.SecureRandom: void <clinit>()>
<sun.net.ftp.FtpClient: int FTP_SUCCESS>	<sun.net.ftp.FtpClient: void <clinit>()>
<sun.net.ftp.FtpClient: int FTP_TRY_AGAIN>	<sun.net.ftp.FtpClient: void <clinit>()>
<sun.net.ftp.FtpClient: int FTP_ERROR>	<sun.net.ftp.FtpClient: void <clinit>()>
<sun.net.www.protocol.http.HttpURLConnection: int maxRedirects>	<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>
<java.lang.ref.Finalizer: java.lang.ref.Finalizer unfinalized>	<java.lang.ref.Finalizer: void <clinit>()>
<sun.net.www.protocol.ftp.FtpDirectoryThread: int imageWidth>	<sun.net.www.protocol.ftp.FtpDirectoryThread: void <clinit>()>
<sun.net.www.protocol.ftp.FtpDirectoryThread: int imageHeight>	<sun.net.www.protocol.ftp.FtpDirectoryThread: void <clinit>()>
<sun.net.www.http.HttpClient: java.lang.String dontProxySource>	<sun.net.www.http.HttpClient: void <clinit>()>
<sun.net.www.http.HttpClient: java.lang.String proxyHost>	<sun.net.www.http.HttpClient: void <clinit>()>
<sun.net.www.http.HttpClient: int proxyPort>	<sun.net.www.http.HttpClient: void <clinit>()>
<java.net.PlainSocketImpl: int preferredConnectionTimeout>	<java.net.PlainSocketImpl: void <clinit>()>
<java.net.PlainSocketImpl: int preferredConnectionTimeout>	<java.net.PlainSocketImpl: void <clinit>()>
<sun.net.www.http.KeepAliveCache: int result>	<sun.net.www.http.KeepAliveCache: int getMaxConnections()>
<sun.net.www.http.KeepAliveCache: int result>	<sun.net.www.http.KeepAliveCache: void <clinit>()>
<sun.net.www.protocol.jar.URLJarFile: int BUF_SIZE>	<sun.net.www.protocol.jar.URLJarFile: void <clinit>()>
<java.text.Normalizer: int maximumDecomposition>	<java.text.Normalizer: void <clinit>()>
<java.text.Normalizer: int maximumCanonical>	<java.text.Normalizer: void <clinit>()>
<java.text.Normalizer: char minimumCombining>	<java.text.Normalizer: void <clinit>()>
<java.text.Normalizer: char minimumCombining>	<java.text.Normalizer: void <clinit>()>
